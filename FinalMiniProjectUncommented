/* Controller

   Function:
   Implement a PI controller for wheel subsystem
   
   Setting up hardware:
   attach motor driver shield to arduino
   attach motor encoder to motor driver shield
      Green to ground
      Blue to 5V
      Yellow to digital i/o 2
      White to digital i/o 3
   Motor driver shield powered by battery
*/


//include for I2C connection
#include <Wire.h>
#define SLAVE_ADDRESS 0x04
byte data[32];

//variable declarations
unsigned long timeNow;
const int chanA = 2;             //encoder channel a
const int chanB = 3;             //encoder channel b
const int enable = 4;            //must be set high for motor to spin
int samplingTime;                //rate between 5-10 ms
int voltageCommand = 10;         //pwm pin controlling motor
int voltageDirection = 8;        //controls voltage direction
double dutyCycle;                //Controls speed of motor     
int input;                       //number input 0-3 communicated via I2C
double posA, posD;               //in radians/sec
int count;                       //counts to determine velocity
double countsPerRevolution;      //constant with motor
double error;                    //difference between posA and posD
double Kp, Ki;                   //PI control constants

//interrupt associated with encoder
void wheelTurn() {
  //determine if clockwise or counterclockwise and increment accordingly
  if (digitalRead(chanA) != digitalRead(chanB)) {
    count++;
  }
  else {
    count--;
  }
}

void setup() {
  pinMode(chanA, INPUT_PULLUP);             
  pinMode(chanB, INPUT_PULLUP);
  pinMode(enable, OUTPUT);                   //MUST BE SET HIGH
  pinMode(voltageCommand, OUTPUT);           //PWM
  pinMode(voltageDirection, OUTPUT);         //Voltage Direction
  digitalWrite(voltageDirection,HIGH);       //Write voltage direction HIGH
  digitalWrite(enable,HIGH); 
  
  //Setup for I2C Connection
  pinMode(13, OUTPUT);
  Serial.begin(115200);                      //Must change baud rate in serial monitor as well
  Wire.begin(SLAVE_ADDRESS);
  Wire.onReceive(receiveData);
  Wire.onRequest(sendData);
  
  samplingTime = 10;                        //sampling time in ms
  countsPerRevolution = 3200;               //counts per rev on spec sheet (specific to motor)
  input = 0; 
  posA = 0;                      
  count = 0;    
  error = 0;
  errorPt2 = 0;                                    
  dutyCycle = 200;                           //will modify angular velocity of motor
  Kp = 5;                                    //Proportional control constant
  Ki = 0.08;                                 //Integral control constant


  //enable interrupt
  attachInterrupt(digitalPinToInterrupt(2), wheelTurn, CHANGE); 
}


//Function to receive data
void receiveData(int byteCount) { 
  int i=0;
  while (Wire.available()) {
    data[i] = Wire.read();
    i++;
  }
}

//Function to send data
void sendData() {
    Wire.write((int)(posA));
}


//Main code, responsible for implementing controller and displaying data to serial monitor
void loop() {
  input = data[1];
  posD = (double)input * 3.14/4.0;  
  
  //stores current time to determine when to stop printing data and to determine if main exceeds sampling time
  timeNow = millis();
  
  error = posD - posA;                //units: radians
 
 //determines direction to spin motor
  if(error<0){
    digitalWrite(voltageDirection, LOW);
  }
  else{
    digitalWrite(voltageDirection, HIGH);
  }
  
  //determines implementation of integral control
  if(abs(error)<0.05){
    dutyCycle = max(0,min((Kp+Ki*0.001)*abs(error)/5.0*255.0,255));
  }
  else{
    dutyCycle = max(0,min((Kp)*abs(error)/5.0*255.0,255));
  }
  
  //write voltageCommand 
  analogWrite(voltageCommand,(int)dutyCycle);

  //calculate angular position (radians)
  posA = (1.0*count)/countsPerRevolution*2*3.14;
  
  //print data 
    Serial.print(millis() / (double)1000);
    Serial.print("\t");
    Serial.print(dutyCycle);
    Serial.print("\t");
    Serial.print(posA);
    Serial.print("\t");
    Serial.print(error);
    Serial.println();

  //check to see if main running exceeded the sampling time
  if ((millis() - timeNow) > samplingTime) {
    Serial.println("Error: main exceeds sampling time");
  }

  //wait until sampling time to re run loop
  while ((millis() - timeNow) < samplingTime);
}
